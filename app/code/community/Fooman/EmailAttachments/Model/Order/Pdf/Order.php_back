<?php

/**
 * @author     Kristof Ringleff
 * @package    Fooman_EmailAttachments
 * @copyright  Copyright (c) 2009 Fooman Limited (http://www.fooman.co.nz)
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category   Mage
 * @package    Mage_Sales
 * @copyright  Copyright (c) 2008 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */


/**
 * Sales Order Invoice PDF model
 *
 * @category   Mage
 * @package    Mage_Sales
 * @author     Magento Core Team <core@magentocommerce.com>
 */
class Fooman_EmailAttachments_Model_Order_Pdf_Order extends Mage_Sales_Model_Order_Pdf_Invoice
{

    /**
     * create a order pdf modelled on the invoice content
     *
     * @param array $orders
     *
     * @return Zend_Pdf
     */
    public function getPdf ($orders = array())
    {
        $this->_beforeGetPdf();
        $this->_initRenderer('order');

        $pdf = new Zend_Pdf();
        $this->_setPdf($pdf);
        $style = new Zend_Pdf_Style();
        $this->_setFontBold($style, 10);

        foreach ($orders as $order) {
        	
        	//Mage::registry('sr_no');
        	//Mage::register('sr_no', '0');
        	
            //could be order id
            if ( !$order instanceof Mage_Sales_Model_Order) {
                $order = Mage::getModel('sales/order')->load($order);
            }

            if ($order->getStoreId()) {
                Mage::app()->getLocale()->emulate($order->getStoreId());
                Mage::app()->setCurrentStore($order->getStoreId());
            }
            $page = $pdf->newPage(Zend_Pdf_Page::SIZE_A4);
            $pdf->pages[] = $page;

            /* Add image */
            $this->insertLogo($page, $order->getStore());

            /* Add address */
            $this->insertAddress($page, $order->getStore());

            /* Add head */
            $this->insertOrder(
                $page,
                $order,
                true
            );

            $page->setFillColor(new Zend_Pdf_Color_GrayScale(1));
            $this->_setFontRegular($page, 11);

            /* Add table */
            $page->setFillColor(new Zend_Pdf_Color_RGB(0.93, 0.92, 0.92));
            $page->setLineColor(new Zend_Pdf_Color_GrayScale(0.5));
            $page->setLineWidth(0.5);

            $page->drawRectangle(25, $this->y, 570, $this->y - 15);
            $this->y -=10;

            /* Add table head */
            $page->setFillColor(new Zend_Pdf_Color_RGB(0.4, 0.4, 0.4));
            $page->drawText(Mage::helper('sales')->__('S No'), 35, $this->y, 'UTF-8');
            $page->drawText(Mage::helper('sales')->__('Brand Name'), 70, $this->y, 'UTF-8');
            $page->drawText(Mage::helper('sales')->__('Product Name'), 150, $this->y, 'UTF-8');
            $page->drawText(Mage::helper('sales')->__('Pack Size and Qty'), 380, $this->y, 'UTF-8');
            //$page->drawText(Mage::helper('sales')->__('SKU'), 255, $this->y, 'UTF-8');
            //$page->drawText(Mage::helper('sales')->__('Qty'), 430, $this->y, 'UTF-8');
            $page->drawText(Mage::helper('sales')->__('Price'), 465, $this->y, 'UTF-8');
            //$page->drawText(Mage::helper('sales')->__('Tax'), 480, $this->y, 'UTF-8');
            $page->drawText(Mage::helper('sales')->__('Subtotal'), 515, $this->y, 'UTF-8');


            $this->y -=15;

            $page->setFillColor(new Zend_Pdf_Color_GrayScale(0));
	    
	    $collectproduct = array();
             foreach ($order->getAllItems() as $_item): 

                if ($_item->getParentItem()) {
                    continue;
                }

          	  $product = Mage::getModel('catalog/product')->load($_item->getProductId());

	          $_product = Mage::getModel('catalog/product');
	          $_productId = $_product->getIdBySku($_item->getSku());
	          //$_product->load($_productId);

                $p = Mage::getModel('catalog/product')->load($_productId);		
		$cats = $p->getCategoryIds();	
		foreach ($cats as $category_id){
		    $category = Mage::getModel('catalog/category')->load($category_id) ;
			if(!empty($category)){
			    $curcatid= $category->getId();
			    $it = 10;    
			    if ( $category) {
			        while( $category->getLevel() != 2 && $it > 0) {
			             $category =  $category->getParentCategory();        
			            if (! $category) {
			                break;
			            }
			        }        
			        if ( $category) {
			            $toplevelcatid= $category->getId();
			        }
			        else {        	
			            //echo 'Cannot find parent category';
			        }
			    }
			}
		}

	          $_cat = Mage::getModel('catalog/category')->load($toplevelcatid);	          //$topCategory->getId()
	          //if(findKey($collectproduct, $topCategory->getId()))
	          $catName = $_cat->getName(); 
	          $item = clone $_item;
	          if(!isset($collectproduct[$catName]))
	          	$collectproduct[$catName] = array();	          
	          array_push($collectproduct[$catName], $_item->getId()."@#@#".$_productId);
	          //array_push($collectproduct[$catName], $_item->getId()."@#@#".$_item);
	          
          endforeach;

             /*if(!$quoteObj)
	          	$quoteObj = new Mage_Sales_Model_Quote();          
              $storeId = Mage::app()->getStore()->getStoreId();*/
	          foreach($collectproduct as $key => $value) {
				//echo "<tr><th colspan='6'>".$key."</th></tr>";

                        $page->drawText($key, 25, $this->y, 'UTF-8');
                        $this->y -= 15;
	          	foreach($value as $key => $val) {
				$valsplit = explode("@#@#", $val);
	          		//$_product = Mage::getModel('catalog/product')->load($valsplit[1]);	          		
	          		//$item = Mage::getModel('sales/quote_item')->setProduct($_product)->setQuote($quoteObj)->setStoreId($storeId)->load($valsplit[0]);
                                $item = $order->getItemById($valsplit[0]);
                                //$items[] = $valsplit[1]; 
                                 
                                if ($this->y < 15) {
                                    $page = $this->newPage(array('table_header' => true));
                                }

                                /* Draw item */
                                //temporarily set item as if we were printing an invoice
                                $item->setQty($item->getQtyOrdered());
                                $item->setOrderItem($item);
                                $page = $this->_drawItem($item, $page, $order);

     		
	          	}
	        } 
            /* Add body */
            /*foreach ($order->getAllItems() as $item) {
                if ($item->getParentItem()) {
                    continue;
                }

                if ($this->y < 15) {
                    $page = $this->newPage(array('table_header' => true));
                }

                //Draw item
                //temporarily set item as if we were printing an invoice
                $item->setQty($item->getQtyOrdered());
                $item->setOrderItem($item);
                $page = $this->_drawItem($item, $page, $order);
            }*/

            /* Add totals */
            $order->setOrder($order);
            $page = $this->insertTotals($page, $order);

            if (Mage::helper('core')->isModuleEnabled('Magemaven_OrderComment')
                && ($order->getCustomerComment() || $order->getCustomerNote())
            ) {
                $comment = Mage::helper('ordercomment')->escapeHtml(
                    $order->getCustomerComment() ? $order->getCustomerComment() : $order->getCustomerNote()
                );
                $this->y -= 15;
                $page->drawText(Mage::helper('ordercomment')->__('Order Comment'), 35, $this->y, 'UTF-8');
                $this->y -= 15;
                $page->drawText($comment, 35, $this->y, 'UTF-8');
            }

            if ($order->getStoreId()) {
                Mage::app()->getLocale()->revert();
            }
        }

        $this->_afterGetPdf();

        return $pdf;
    }

}